#*************************************************************************
#
# How to use this file:
# 1) Copy Makefile.ooo-external.msvc.in to Makefile.ooo-external.msvc
# 2) Set "LIBWPD_DEBUG" enviroment variable if you want to get debugging
#    information.
# 3) Set "DEP_PREFIX" to the prefix where are installed your dependencies
#    (libiconv, gettext, glib, zlib, libxml2, libgsf, libwpd)
# 4) Build using "make --win32 -f Makefile.ooo-external.msvc" (Tested with the
#    GNU Make that is part of MSys distribution http://www.mingw.org/msys
#
# For more information, read README.ooo-external.msvc file
#
#**************************************************************************

# Builds the WordPerfect filter component.
# Set the LIBWPD_DEBUG environment variable to -DDEBUG to get debugging information
LIBWPD_DEBUG=

# Modify the prefix where your dependencies are installed
DEP_PREFIX=

DEP_INCLUDES= -I.\filter -I$(DEP_PREFIX)\include \
	-I$(DEP_PREFIX)\include\libgsf-1 \
	-I$(DEP_PREFIX)\include\libwpd-1 \
	-I$(DEP_PREFIX)\include\libwpd-stream-1 \
	-I$(DEP_PREFIX)\include\libxml2 \
	-I$(DEP_PREFIX)\include\glib-2.0 \
	-I$(DEP_PREFIX)\lib\glib-2.0\include 
DEP_LIBS=$(DEP_PREFIX)\lib\libwpd-1.lib $(DEP_PREFIX)\lib\libwpd-stream-1.lib \
	$(DEP_PREFIX)\lib\libgsf.lib \
	$(DEP_PREFIX)\lib\zlib.lib $(DEP_PREFIX)\lib\libxml2_a.lib \
	$(DEP_PREFIX)\lib\glib-2.0.lib $(DEP_PREFIX)\lib\gobject-2.0.lib \
	$(DEP_PREFIX)\lib\iconv.lib $(DEP_PREFIX)\lib\intl.lib

# Builds the C++ FlatXMLFilter component example of the Developers Guide.

PRJ=$(OO_SDK_HOME)
SETTINGS=$(PRJ)/settings

include $(SETTINGS)/settings.mk
include $(SETTINGS)/std.mk
include $(SETTINGS)/dk.mk

# Redefine OUT to something more sensible
OUT=.\$(OS).out
COMPONENT_PACKAGE_DIR=$(OUT_BIN)
 
# Define non-platform/compiler specific settings
COMPONENT_NAME=WriterPerfect
COMPONENT_IMPL_NAME=$(COMPONENT_NAME).uno.$(SHAREDLIB_EXT) 
OUT_COMP_INC = $(OUT_INC)/$(COMPONENT_NAME)
OUT_COMP_GEN = $(OUT_MISC)/$(COMPONENT_NAME)
OUT_COMP_SLO=$(OUT_SLO)/$(COMPONENT_NAME)
COMPONENT_XML=ooo/$(COMPONENT_NAME).uno.xml
COMPONENT_PACKAGE = $(OUT_BIN)/$(COMPONENT_NAME).uno.zip
COMPONENT_PACKAGE_URL = $(subst \\,\,"$(COMPONENT_PACKAGE_DIR)$(PS)$(COMPONENT_NAME).uno.zip") 


REGISTERFLAG = $(OUT_MISC)/$(COMPONENT_NAME)_register_component.flag
COMPONENT_TYPEFLAG = $(OUT_MISC)/$(COMPONENT_NAME)_types.flag

CXXFILES= \
	ooo/xmlkywd.cxx 			\
	ooo/xmltoken.cxx 			\
	ooo/attrlist.cxx 			\
	ooo/WordPerfectImportStream.cxx		\
	ooo/WordPerfectImportFilter.cxx		\
	ooo/OODocumentHandler.cxx		\
	ooo/genericfilter.cxx			\
	filter/DocumentElement.cxx		\
	filter/FontStyle.cxx			\
	filter/ListStyle.cxx			\
	filter/PageSpan.cxx			\
	filter/SectionStyle.cxx			\
	filter/TableStyle.cxx			\
	filter/TextRunStyle.cxx 		\
	filter/WordPerfectCollector.cxx

SLOFILES = $(patsubst %.cxx,$(OUT_COMP_SLO)/%.$(OBJ_EXT),$(CXXFILES))

TYPES = $(shell xml2cmp -types stdout $(COMPONENT_XML))
TYPESLIST = $(foreach t,$(TYPES),-T$(t))

# Targets
.PHONY: ALL
ALL : \
	WriterPerfect

include $(SETTINGS)/stdtarget.mk

$(COMPONENT_TYPEFLAG) : $(COMPONENT_XML)
	-$(MKDIR) $(subst /,\,$(@D))
	-$(DEL) $(subst /,\,$(COMPONENT_TYPEFLAG))
	cppumaker -Gc -BUCR -O$(subst /,\,$(OUT_COMP_INC)) $(TYPESLIST) $(DKREGISTRYNAME)
	echo flagged > $(subst /,\,$@)

$(OUT_COMP_SLO)/%.$(OBJ_EXT) : %.cxx $(COMPONENT_TYPEFLAG)
	-$(MKDIR) $(subst /,\,$(@D))
	$(CC) $(CC_FLAGS) $(CC_INCLUDES) -I../ -I$(OUT_COMP_INC) $(DEP_INCLUDES) $(CC_DEFINES) \
	-nologo -GR $(CC_OUTPUT_SWITCH)$@ $(LIBWPD_DEBUG) $<

$(OUT_COMP_GEN)/%.def : ooo/exports.dxp
	echo $(COMPONENT_PACKAGE_URL)
	-$(MKDIR) $(subst /,\,$(@D))
	@echo EXPORTS > $(subst /,\,$@)
	$(CAT) ooo\exports.dxp >> $(subst /,\,$@)

$(SHAREDLIB_OUT)/%.$(SHAREDLIB_EXT) : $(SLOFILES) $(OUT_COMP_GEN)/%.def
	-$(MKDIR) $(subst /,\,$(@D))
	$(LINK) -nologo $(subst /,-,$(LIBRARY_LINK_FLAGS)) \
	-OUT:$(subst /,\,$@) -MAP:$(subst /,\,$(OUT_COMP_GEN)/$(subst $(SHAREDLIB_EXT),map,$(@F))) \
	-DEF:$(subst /,\,$(OUT_COMP_GEN)/$(subst $(SHAREDLIB_EXT),def,$(@F))) \
	$(subst /,\,$(SLOFILES)) $(CPPUHELPERLIB) $(CPPULIB) $(SALLIB) $(STLPORTLIB)\
	$(DEP_LIBS) msvcprt.lib msvcrt.lib kernel32.lib


$(OUT_BIN)/%.zip : $(SHAREDLIB_OUT)/%.$(SHAREDLIB_EXT) ooo/TypeDetection.xcu
	-$(MKDIR) $(subst /,\,$(@D))
	-$(MKDIR) $(subst /,\,$(OUT_COMP_GEN)/$(PACKAGE_LIB_DIR))	 
	$(COPY) $(subst /,\,$<) $(subst /,\,$(OUT_COMP_GEN)/$(PACKAGE_LIB_DIR))
	$(COPY) ooo\TypeDetection.xcu $(subst /,\,$(OUT_COMP_GEN)) 
	cd $(subst /,\,$(OUT_COMP_GEN)) && jar cvfM $(subst /,\,../../bin/$(@F)) TypeDetection.xcu $(subst /,\,$(PACKAGE_LIB_DIR)/$(<F))

$(REGISTERFLAG) : $(COMPONENT_PACKAGE)
ifeq "$(SDK_AUTO_DEPLOYMENT)" "YES"
	-$(MKDIR) $(subst /,\,$(@D))
	-$(DEL) $(subst /,\,$@)
	"$(DEPLOYTOOL)" $(COMPONENT_PACKAGE_URL)
	@echo flagged > $(subst /,\,$@)
else
	@echo --------------------------------------------------------------------------------
	@echo  If you want to install your component automatically, please set the environment
	@echo  variable SDK_AUTO_DEPLOYMENT = YES. But note that auto deployment is only 
	@echo  possible if no office instance is running. 
	@echo --------------------------------------------------------------------------------
endif

WriterPerfect : $(REGISTERFLAG) 
	@echo --------------------------------------------------------------------------------
	@echo The WriterPerfect component was installed if SDK_AUTO_DEPLOYMENT = YES.
	@echo You can use this filter component inside your office installation. 
	@echo --------------------------------------------------------------------------------

.PHONY: clean
clean :
	-$(DELRECURSIVE) $(subst /,\,$(OUT_COMP_INC))
	-$(DELRECURSIVE) $(subst /,\,$(OUT_COMP_GEN))
	-$(DELRECURSIVE) $(subst /,\,$(OUT_COMP_SLO))
	-$(DEL) $(subst /,\,$(COMPONENT_PACKAGE_URL))
	-$(DEL) $(subst /,\,$(REGISTERFLAG))
	-$(DEL) $(subst /,\,$(COMPONENT_TYPEFLAG))
	-$(DEL) $(subst /,\,$(SHAREDLIB_OUT)/$(COMPONENT_NAME).*)
