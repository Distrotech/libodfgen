AC_INIT(filter/DocumentElement.cxx)

AM_CONFIG_HEADER(config.h)

WRITERPERFECT_MAJOR_VERSION=0
WRITERPERFECT_MINOR_VERSION=8
WRITERPERFECT_MICRO_VERSION=0

LIBWPD_REQUIRED_VERSION=0.9.0
LIBWPG_REQUIRED_VERSION=0.2.0

WRITERPERFECT_VERSION="$WRITERPERFECT_MAJOR_VERSION.$WRITERPERFECT_MINOR_VERSION.$WRITERPERFECT_MICRO_VERSION"

AC_SUBST(WRITERPERFECT_MAJOR_VERSION)
AC_SUBST(WRITERPERFECT_MINOR_VERSION)
AC_SUBST(WRITERPERFECT_MICRO_VERSION)
AC_SUBST(WRITERPERFECT_VERSION)
AC_SUBST(LIBWPD_REQUIRED_VERSION)
AC_SUBST(LIBWPG_REQUIRED_VERSION)

AM_INIT_AUTOMAKE(writerperfect, $WRITERPERFECT_VERSION)

AC_PROG_CC

AC_PROG_CXX

AC_PROG_INSTALL

AC_ARG_ENABLE([static-tools],[  --enable-static-tools  Link tools statically],[
       case "${enableval}" in
          yes) enable_static_tools="yes" ;;
          no)  enable_static_tools="no" ;;
            *) AC_MSG_ERROR(bad value ${enableval} for --static-tools) ;;
       esac
],[
       enable_static_tools="no"
])

AM_CONDITIONAL(STATIC_TOOLS, test x$enable_static_tools = xyes)

if test x$enable_static_tools = xyes; then
	enable_static="yes"
	enable_shared="no"
fi

AC_PROG_LIBTOOL

AC_PATH_PROG(PKG_CONFIG, pkg-config, no)

PKG_CHECK_MODULES(WRITERPERFECTCORE,[
    libwpd-0.9 >= $LIBWPD_REQUIRED_VERSION
    libwpd-stream-0.9 >= $LIBWPD_REQUIRED_VERSION
])

WRITERPERFECTCORE_CXXFLAGS="$WRITERPERFECTCORE_CFLAGS"
AC_SUBST(WRITERPERFECTCORE_CXXFLAGS)
AC_SUBST(WRITERPERFECTCORE_LIBS)

test_libgsf=false
AC_ARG_WITH(libgsf,
	[  --with-libgsf           Use libgsf for output of structured files],
	if test "x$withval" = xyes; then
		test_libgsf=true
		AC_DEFINE([USE_GSF_OUTPUT], [1], [Whether to use libgsf for output of structured files])
	fi
)

if test "x$test_libgsf" = "xtrue"; then

    PKG_CHECK_MODULES(WRITERPERFECTGSF,[
        libgsf-1 >= 1.6.0
        glib-2.0 >= 2.0.0
    ])

    PKG_CHECK_EXISTS([ libgsf-1 >= 1.12.0 ],[
        AC_DEFINE([GSF_HAS_COMPRESSION_LEVEL], [1], [Whether compression level is supported])
    ],[
        AC_MSG_WARN([*** Will not be able to write uncompressed mimetype stream.])
        AC_MSG_WARN([*** The output files will not be strictly ODF compliant.])
    ])

fi

WRITERPERFECTGSF_CXXFLAGS="$WRITERPERFECTGSF_CFLAGS"
AC_SUBST(WRITERPERFECTGSF_CXXFLAGS)
AC_SUBST(WRITERPERFECTGSF_LIBS)

AM_CONDITIONAL(USE_GSF_OUTPUT, test "x$test_libgsf" = "xtrue")


test_libwpg=true
AC_ARG_WITH(libwpg,
	[  --without-libwpg        Do not use libwpg for conversion of WordPerfect Graphics (embedded images will not be converted)],
	if test "x$withval" = xno; then
		test_libwpg=false
	fi
)

if test "x$test_libwpg" = "xtrue"; then

	AC_DEFINE([USE_LIBWPG], [1], [Whether to use libwpg for conversion of WordPerfect Graphics])

    PKG_CHECK_MODULES(WRITERPERFECTWPG,[
        libwpg-0.2 >= $LIBWPG_REQUIRED_VERSION
    ])

fi

AM_CONDITIONAL(USE_LIBWPG, test "x$test_libwpg" = "xtrue")


WRITERPERFECTWPG_CXXFLAGS="$WRITERPERFECTWPG_CFLAGS"
AC_SUBST(WRITERPERFECTWPG_CXXFLAGS)
AC_SUBST(WRITERPERFECTWPG_LIBS)

AC_MSG_CHECKING([for native Win32])
case "$host" in
  *-*-mingw*)
    native_win32=yes
    AC_CHECK_TOOL(WINDRES, windres)
    WPD2ODT_WIN32_RESOURCE=wpd2odt-win32res.lo
    WPG2ODG_WIN32_RESOURCE=wpg2odg-win32res.lo
    ;;
   *)
    native_win32=no
    WPD2ODT_WIN32_RESOURCE=
    WPG2ODG_WIN32_RESOURCE=
    ;;
esac
AC_MSG_RESULT([$native_win32])
AM_CONDITIONAL(OS_WIN32, test "$native_win32" = yes)
AC_SUBST(WPD2ODT_WIN32_RESOURCE)
AC_SUBST(WPG2ODG_WIN32_RESOURCE)

AC_MSG_CHECKING([for Win32 platform in general])
case "$host" in
  *-*-mingw*|*-*-cygwin*)
    platform_win32=yes
    ;;
  *)
    platform_win32=no
    ;;
esac
AC_MSG_RESULT($platform_win32)
AM_CONDITIONAL(PLATFORM_WIN32, test "$platform_win32" = yes)


AC_ARG_ENABLE(debug,[  --enable-debug    Turn on debugging],[
	case "${enableval}" in
	   yes)	debug=true ;
		DEBUG_CXXFLAGS="-DDEBUG -g" ;;
	    no)	debug=false ;
		DEBUG_CXXFLAGS="-DNDEBUG" ;;
	     *)	AC_MSG_ERROR(bad value ${enableval} for --enable-debug) ;;
	esac
],[	debug=false
	DEBUG_CXXFLAGS="-DNDEBUG" 
])

AC_SUBST(DEBUG_CXXFLAGS)

AC_OUTPUT([
Makefile
writerperfect.spec
writerperfect-zip
build/Makefile
build/win32/Makefile
filter/Makefile
cmdline/Makefile
cmdline/wpd2odt.rc
cmdline/wpg2odg.rc
])

case "$debug" in
     "true" )
        AC_MSG_RESULT([Configured with debugging symbols.]) ;;
esac

